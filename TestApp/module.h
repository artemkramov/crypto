/*************************************************************/
/* Copyright (C) 2018 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Test (Trial), License 76236Z 76236Z. */
/* Abstract syntax: module */
/* Created: Tue Jan 30 12:19:34 2018 */
/* ASN.1/C++ compiler version: 6.5 */
/* Code generated for runtime version 6.5 or later */
/* Compiler operating system: Windows X64 */
/* Compiler machine type: AMD64 */
/* Target operating system: Windows X64 */
/* Target machine type: AMD64 */
/* C++ compiler options required: None */
/* ASN.1 compiler options and file names specified:
 * -allow universaltags module.asn1
 */

#ifndef OSS_module
#define OSS_module

#include "oss.h"
#include "asn1.h"

/* Representation types */

enum AttributeUsage {
    userApplications = 0,
    directoryOperation = 1,
    distributedOperation = 2,
    dSAOperation = 3
};


const OSS_INT32 v1 = 0;
typedef OSS_INT32 Version;

class OSS_PUBLIC PrivateKeyInfo_Type_Table_Type : public OssConstrainedOpenType
{
public:
    PrivateKeyInfo_Type_Table_Type();
    PrivateKeyInfo_Type_Table_Type(const PrivateKeyInfo_Type_Table_Type &);
    ~PrivateKeyInfo_Type_Table_Type();
    PrivateKeyInfo_Type_Table_Type & operator = (const PrivateKeyInfo_Type_Table_Type &);
    int operator == (const PrivateKeyInfo_Type_Table_Type &) const;
    int operator != (const PrivateKeyInfo_Type_Table_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);
private:
    void cleanup_decoded();
};

typedef OssString PrivateKey;

class OSS_PUBLIC __shared1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID algorithm;
    typedef PrivateKeyInfo_Type_Table_Type parameters;

    __shared1();
    __shared1(const __shared1 &);
    __shared1(const algorithm &, const parameters &);
    __shared1(const algorithm &);

    __shared1 & operator = (const __shared1 &);
    int operator == (const __shared1 &) const;
    int operator != (const __shared1 &) const;

    algorithm & get_algorithm();
    const algorithm & get_algorithm() const;
    void set_algorithm(const algorithm &);

    parameters *get_parameters();
    const parameters *get_parameters() const;
    void set_parameters(const parameters &);
    int parameters_is_present() const;
    void omit_parameters();
private:
    OSS_UINT32 bit_mask;
    algorithm algorithm_field;
    parameters parameters_field;
};

class OSS_PUBLIC PKAttribute;

class OSS_PUBLIC Attributes : public OssList  /* SET OF */
{
public:
    typedef PKAttribute component;

    Attributes();
    Attributes(const Attributes &);
    ~Attributes();

    Attributes & operator = (const Attributes &);
    int operator == (const Attributes &) const;
    int operator != (const Attributes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(Attributes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, Attributes *);

    int remove_front();
    int remove_after(OssIndex);

    Attributes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC PrivateKeyInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 version;
    typedef __shared1 privateKeyAlgorithm;
    typedef OssString privateKey;
    typedef Attributes attributes;

    PrivateKeyInfo();
    PrivateKeyInfo(const PrivateKeyInfo &);
    PrivateKeyInfo(version, const privateKeyAlgorithm &, const privateKey &, const attributes &);
    PrivateKeyInfo(version, const privateKeyAlgorithm &, const privateKey &);

    PrivateKeyInfo & operator = (const PrivateKeyInfo &);
    int operator == (const PrivateKeyInfo &) const;
    int operator != (const PrivateKeyInfo &) const;

    version & get_version();
    version get_version() const;
    void set_version(version);

    privateKeyAlgorithm & get_privateKeyAlgorithm();
    const privateKeyAlgorithm & get_privateKeyAlgorithm() const;
    void set_privateKeyAlgorithm(const privateKeyAlgorithm &);

    privateKey & get_privateKey();
    const privateKey & get_privateKey() const;
    void set_privateKey(const privateKey &);

    attributes *get_attributes();
    const attributes *get_attributes() const;
    void set_attributes(const attributes &);
    int attributes_is_present() const;
    void omit_attributes();
private:
    OSS_UINT32 bit_mask;
    version version_field;
    privateKeyAlgorithm privateKeyAlgorithm_field;
    privateKey privateKey_field;
    attributes attributes_field;
};

class OSS_PUBLIC __shared2 : public OssList  /* SET OF */
{
public:
    typedef PrivateKeyInfo_Type_Table_Type component;

    __shared2();
    __shared2(const __shared2 &);
    ~__shared2();

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared2 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Context   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID contextType;
    typedef __shared2 contextValues;
    typedef ossBoolean fallback;

    static const fallback default_fallback;

    static fallback get_default_fallback();

    Context();
    Context(const Context &);
    Context(const contextType &, const contextValues &, fallback);
    Context(const contextType &, const contextValues &);

    Context & operator = (const Context &);
    int operator == (const Context &) const;
    int operator != (const Context &) const;

    contextType & get_contextType();
    const contextType & get_contextType() const;
    void set_contextType(const contextType &);

    contextValues & get_contextValues();
    const contextValues & get_contextValues() const;
    void set_contextValues(const contextValues &);

    fallback *get_fallback();
    const fallback *get_fallback() const;
    void set_fallback(fallback);
    int fallback_is_default() const;
    void set_default_fallback();
private:
    OSS_UINT32 bit_mask;
    contextType contextType_field;
    contextValues contextValues_field;
    fallback fallback_field;
};

class OSS_PUBLIC __seq2;

class OSS_PUBLIC __setof4 : public OssList  /* SET OF */
{
public:
    typedef __seq2 component;

    __setof4();
    __setof4(const __setof4 &);
    ~__setof4();

    __setof4 & operator = (const __setof4 &);
    int operator == (const __setof4 &) const;
    int operator != (const __setof4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof4 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof4 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof4 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC PKAttribute   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef __shared2 values;
    typedef __setof4 valuesWithContext;

    PKAttribute();
    PKAttribute(const PKAttribute &);
    PKAttribute(const type &, const values &, const valuesWithContext &);
    PKAttribute(const type &, const values &);

    PKAttribute & operator = (const PKAttribute &);
    int operator == (const PKAttribute &) const;
    int operator != (const PKAttribute &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    values & get_values();
    const values & get_values() const;
    void set_values(const values &);

    valuesWithContext *get_valuesWithContext();
    const valuesWithContext *get_valuesWithContext() const;
    void set_valuesWithContext(const valuesWithContext &);
    int valuesWithContext_is_present() const;
    void omit_valuesWithContext();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    values values_field;
    valuesWithContext valuesWithContext_field;
};

class OSS_PUBLIC __setof2 : public OssList  /* SET OF */
{
public:
    typedef Context component;

    __setof2();
    __setof2(const __setof2 &);
    ~__setof2();

    __setof2 & operator = (const __setof2 &);
    int operator == (const __setof2 &) const;
    int operator != (const __setof2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__setof2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __setof2 *);

    int remove_front();
    int remove_after(OssIndex);

    __setof2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef PrivateKeyInfo_Type_Table_Type value;
    typedef __setof2 contextList;

    __seq2();
    __seq2(const __seq2 &);
    __seq2(const value &, const contextList &);

    __seq2 & operator = (const __seq2 &);
    int operator == (const __seq2 &) const;
    int operator != (const __seq2 &) const;

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);

    contextList & get_contextList();
    const contextList & get_contextList() const;
    void set_contextList(const contextList &);
private:
    value value_field;
    contextList contextList_field;
};

typedef OssString EncryptedData;

class OSS_PUBLIC EncryptedPrivateKeyInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 encryptionAlgorithm;
    typedef OssString encryptedData;

    EncryptedPrivateKeyInfo();
    EncryptedPrivateKeyInfo(const EncryptedPrivateKeyInfo &);
    EncryptedPrivateKeyInfo(const encryptionAlgorithm &, const encryptedData &);

    EncryptedPrivateKeyInfo & operator = (const EncryptedPrivateKeyInfo &);
    int operator == (const EncryptedPrivateKeyInfo &) const;
    int operator != (const EncryptedPrivateKeyInfo &) const;

    encryptionAlgorithm & get_encryptionAlgorithm();
    const encryptionAlgorithm & get_encryptionAlgorithm() const;
    void set_encryptionAlgorithm(const encryptionAlgorithm &);

    encryptedData & get_encryptedData();
    const encryptedData & get_encryptedData() const;
    void set_encryptedData(const encryptedData &);
private:
    encryptionAlgorithm encryptionAlgorithm_field;
    encryptedData encryptedData_field;
};

/* Universal PDU class */

class OSS_PUBLIC module_PDU : public UniversalPDU {
public:
    module_PDU();
    void set_PrivateKeyInfo(PrivateKeyInfo &);
    PrivateKeyInfo *get_PrivateKeyInfo() const;
    void set_EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfo &);
    EncryptedPrivateKeyInfo *get_EncryptedPrivateKeyInfo() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_PrivateKeyInfo(const PrivateKeyInfo &);
    const PrivateKeyInfo *get_const_PrivateKeyInfo() const;
    void set_const_EncryptedPrivateKeyInfo(const EncryptedPrivateKeyInfo &);
    const EncryptedPrivateKeyInfo *get_const_EncryptedPrivateKeyInfo() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC PrivateKeyInfo_PDU : public ConcretePDU {
public:
    PrivateKeyInfo_PDU();
    void set_data(PrivateKeyInfo &);
    PrivateKeyInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PrivateKeyInfo & d);
    const PrivateKeyInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncryptedPrivateKeyInfo_PDU : public ConcretePDU {
public:
    EncryptedPrivateKeyInfo_PDU();
    void set_data(EncryptedPrivateKeyInfo &);
    EncryptedPrivateKeyInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncryptedPrivateKeyInfo & d);
    const EncryptedPrivateKeyInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC module_Control : public OssControl {
public:
    module_Control();
    module_Control(const module_Control &);
};

#endif // OSS_module
