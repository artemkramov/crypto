/*
Program for making cryptographic operations with Smart Card
*/
#include <conio.h>
#include <stdio.h>
#include "pcsc.h"
#include "util.h"

// Define optional methods for demonstration
void printMenu();
int scenarioClearAll();
int scenarioImportPrivateKey();
int scenarioSignHashData();

	
int main(int argc, char* argv[])
{
	// Include Winscard library for working with card reader
	#pragma comment(lib, "Winscard")

	int scenarioNumber = 0;

    LONG lRetValue;

	PCSCResponse response;
	strcpy(response.errorString, "");

	system("cls");
	
	// Connect to the device
	lRetValue = PCSC_Connect(NULL);
    PCSC_EXIT_ON_ERROR(lRetValue);

	// Activate the protocol (T=0 or T=1)
	lRetValue = PCSC_ActivateCard();
    PCSC_EXIT_ON_ERROR(lRetValue);

	// Switch to the mode of the special commands
	response = PCSC_Select();
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	int isRunning = 1;

	while (isRunning > 0)
	{
		// Show menu for user and read the number of scenario
		printMenu();
		scanf ("%d", &scenarioNumber);
		switch (scenarioNumber)
		{
			case 1:
				scenarioClearAll();
				break;
			case 2:
				scenarioImportPrivateKey();
				break;
			case 3:
				scenarioSignHashData();
				break;
			case 4:
				isRunning = 0;
				break;
			default:
				isRunning = 0;
				break;
		}
	}
	
    PCSC_Disconnect();
    
    printf("\n");
    getchar();
	return 0;	
}

/**
* Print help menu for user
*/
void printMenu()
{
	printf("\n\n");
	printf("-------------PCSC Test program-------------\n\n");
	printf("-------------------------------------------\n");
	printf("--------List of available scenarios--------\n");
	printf("   1 - clear all data\n");
	printf("   2 - import private key\n");
	printf("   3 - sign hash data\n");
	printf("   4 - exit\n");
	printf("-------------------------------------------\n");
	printf("Please choose the appropriate scenario: ");
}

/**
* Scenario for data clearing 
*/
int scenarioClearAll()
{
	PCSCResponse response;
	strcpy(response.errorString, "");

	// Clear data
	response = PCSC_ClearAll();
	PCSC_EXIT_ON_RESPONSE_ERROR(response);
	
	// Activate card
	response = PCSC_Activate();
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	return 1;
}

/**
* Scenario to import private key
*/
int scenarioImportPrivateKey()
{
	PCSCResponse response;
	strcpy(response.errorString, "");

	// Enter the PIN
	BYTE pin[] = { 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38 };
	response = PCSC_CheckPin(pin, sizeof(pin) / sizeof(BYTE));
	PCSC_EXIT_ON_RESPONSE_ERROR(response);
	
	// Waiting for the input
	response = PCSC_Challenge();
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	// Prepare data for import
	BYTE module1[] = { 0xE5, 0xB4, 0x57, 0xC2, 0x97, 0x65, 0xE2, 0xAF, 0xCE, 0x66, 0x41, 0x44, 0xB5, 0x70, 0x65, 0x42, 0xD0, 0xC3, 0x7A, 0x0D, 0xC0, 0xC6, 0x6D, 0x0C, 0x65, 0xFD, 0x5C, 0x13, 0x92, 0x12, 0x44, 0x04, 0x8A, 0xE6, 0x3D, 0x1A, 0x02, 0x98, 0x47, 0xE0, 0x3B, 0x98, 0xAE, 0x7D, 0xC6, 0x24, 0xC4, 0xA2, 0x83, 0xCC, 0x0A, 0x83, 0x6B, 0x07, 0xD4, 0xD8, 0x1E, 0x9B, 0x72, 0xF5, 0xF3, 0x63, 0xC4, 0x27, 0x70, 0xD0, 0xF3, 0xB2, 0x87, 0xF1, 0xB5, 0xF9, 0x1A, 0x20, 0x5B, 0x0E, 0x02, 0x7C, 0x6E, 0x3C, 0xD4, 0x93, 0xAE, 0xF1, 0x5B, 0xF5, 0x19, 0x77, 0x01, 0x5A, 0xCA, 0x99, 0xC2, 0x72, 0xBE, 0x32, 0x12, 0xB2, 0x5D, 0x4D, 0x2A, 0x60, 0x0F, 0xB9, 0x91, 0xDD, 0xA2, 0x6B, 0xA9, 0x6C, 0x7F, 0x82, 0x3A, 0x64, 0x43, 0x6E, 0xB7, 0xB4, 0x63, 0x36, 0x03, 0xB8, 0xFE, 0xCC, 0xCC, 0xD3, 0xD4, 0x33 };
	BYTE module2[] = { 0x3F, 0x16, 0x35, 0xBD, 0x35, 0xB5, 0x84, 0x19, 0x8F, 0x44, 0xCE, 0x23, 0x3B, 0xC4, 0xDC, 0x43, 0x25, 0xD9, 0x93, 0x6F, 0x78, 0x7A, 0xBF, 0xF1, 0x4F, 0xAE, 0xEF, 0x14, 0xD5, 0x82, 0xAB, 0x5E, 0x83, 0xF6, 0x38, 0x1F, 0x21, 0x82, 0xDC, 0x41, 0x90, 0xC8, 0x2C, 0x6C, 0x71, 0x7D, 0x0D, 0xC5, 0xAA, 0x1F, 0x46, 0x49, 0xB7, 0x7F, 0x6F, 0x98, 0x79, 0x7C, 0x6D, 0xF9, 0xBD, 0x68, 0xEF, 0x76, 0xAA, 0x22, 0x87, 0x9E, 0xF6, 0x31, 0x6B, 0xEC, 0xA2, 0xE5, 0x8A, 0x32, 0x30, 0xF4, 0xDC, 0xC5, 0x76, 0xD2, 0x2E, 0xE9, 0xC1, 0x8D, 0x36, 0xB8, 0x74, 0x2B, 0x6E, 0x7B, 0x21, 0x7A, 0x9B, 0x12, 0x79, 0x35, 0xF0, 0xB1, 0x7C, 0x5D, 0x69, 0xAF, 0xCF, 0x6F, 0x46, 0x9A, 0xCF, 0xB5, 0x10, 0x05, 0x0D, 0xC9, 0xB3, 0x90, 0x69, 0xA1, 0x5F, 0x5F, 0xF2, 0xCD, 0x55, 0x96, 0x6E, 0x5C, 0x0C, 0xC7 };
	BYTE key1[] = { 0x45, 0x42, 0xD5, 0x60, 0x01, 0x3A, 0x6A, 0xA5, 0x93, 0xE5, 0x49, 0xC6, 0x73, 0x99, 0x21, 0x38, 0x00, 0x6A, 0xD9, 0x5F, 0xE3, 0x8A, 0xBB, 0x20, 0xA1, 0x01, 0x53, 0xBA, 0xDC, 0x22, 0xB9, 0xB2, 0xF4, 0x86, 0x13, 0x8D, 0x62, 0xA7, 0x39, 0xA6, 0x02, 0x3E, 0xD8, 0xFA, 0xBF, 0xE0, 0x48, 0xF4, 0x46, 0xD6, 0xF5, 0x1F, 0xE3, 0xF0, 0x6B, 0x42, 0x8A, 0x84, 0xDB, 0xDE, 0xD7, 0xED, 0x3A, 0xB1, 0x9E, 0x6E, 0x12, 0xFC, 0x79, 0x81, 0x27, 0x06, 0xBE, 0x56, 0x1E, 0x61, 0x0D, 0xFE, 0x2A, 0xBD, 0x16, 0x40, 0xAC, 0x61, 0x15, 0x54, 0x09, 0xEC, 0x72, 0x13, 0xE6, 0x88, 0x2E, 0x97, 0x8F, 0x24, 0xF7, 0xCD, 0x75, 0xEC, 0x0D, 0x78, 0x23, 0xF4, 0x58, 0x56, 0xCD, 0xD6, 0xF3, 0xF5, 0x59, 0xC3, 0x87, 0x7C, 0x2A, 0x2D, 0xBA, 0x6D, 0x55, 0x67, 0xFA, 0x36, 0x50, 0x8C, 0xDA, 0x10, 0x43, 0xD9 };
	BYTE key2[] = { 0x05, 0x03, 0xE7, 0x50, 0xD0, 0xF4, 0x5B, 0x1E, 0xD0, 0x11, 0x9F, 0x6F, 0x2B, 0x54, 0xEA, 0x66, 0x7F, 0x53, 0xF5, 0xA4, 0xFD, 0xD8, 0x6D, 0x34, 0xAC, 0x85, 0x59, 0xC4, 0x5F, 0x40, 0x4D, 0xE8, 0xC8, 0xAD, 0x53, 0x06, 0xE4, 0x70, 0x51, 0x40, 0x3B, 0x8D, 0x0B, 0x57, 0x9F, 0xC6, 0xE2, 0x52, 0xA9, 0x0D, 0x04, 0xEA, 0x6C, 0x52, 0x5D, 0xFF, 0xFD, 0x95, 0x95, 0xC0, 0x41, 0x9B, 0xAF, 0xD0, 0x47, 0x94, 0x55, 0x32, 0xD8, 0xD6, 0x56, 0x36, 0x6C, 0x06, 0xA9, 0xB4, 0xDD, 0xFA, 0x07, 0x49, 0xF4, 0x23, 0xED, 0x55, 0x02, 0xB0, 0xEF, 0xAA, 0x39, 0xAE, 0x9C, 0x38, 0x03, 0x2C, 0xF7, 0x27, 0x8B, 0x90, 0x67, 0x98, 0x7B, 0xCE, 0x3A, 0x6C, 0x7B, 0x0E, 0xE5, 0xE0, 0x93, 0x6A, 0x45, 0x9F, 0x2D, 0x7F, 0xB5, 0xBB, 0x01, 0x58, 0x92, 0x60, 0xDB, 0x3C, 0x37, 0x8D, 0xE3, 0x02, 0xAC, 0x0B };
	int dataLength = 0x80;

	// Run import by the chunks of the data
	response = PCSC_InitImport(module1, dataLength, 0x01);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	response = PCSC_InitImport(module2, dataLength, 0x02);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	response = PCSC_InitImport(key1, dataLength, 0x03);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	response = PCSC_InitImport(key2, dataLength, 0x04);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	// Upload data into the key
	BYTE KID = 0x0e;
	BYTE size[] = { 0x08, 0x00 };
	response = PCSC_Import(KID, size);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);
	return 1;
}

/**
* Sign hash data
*/
int scenarioSignHashData()
{
	PCSCResponse response;
	strcpy(response.errorString, "");

	// Enter the PIN
	BYTE pin[] = { 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38 };
	response = PCSC_CheckPin(pin, sizeof(pin) / sizeof(BYTE));
	PCSC_EXIT_ON_RESPONSE_ERROR(response);

	BYTE KID = 0x0e;

	// Check if the private key is present
	response = PCSC_CheckIfKeyPresent(KID);
	PCSC_EXIT_ON_RESPONSE_ERROR(response);
	if (response.data[0] == 0x01)
	{
		// Sign the given hash data
		//BYTE hash[] = { 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0x01, 0x0A, 0xB8, 0x37, 0x96, 0x22, 0x91, 0x3B, 0xAE, 0x19, 0x53, 0x05, 0xE5, 0x17, 0x79, 0x93, 0xF0, 0x06, 0x85, 0x1E };
		//BYTE hash[] = { 0x01, 0x0A, 0xB8, 0x37, 0x96, 0x22, 0x91, 0x3B, 0xAE, 0x19, 0x53, 0x05, 0xE5, 0x17, 0x79, 0x93, 0xF0, 0x06, 0x85, 0x1E };
		BYTE hash[] = { 0x1E, 0x85, 0x06, 0xF0, 0x93, 0x79, 0x17, 0xE5, 0x05, 0x53, 0x19, 0xAE, 0x3B, 0x91, 0x22, 0x96, 0x37, 0xB8, 0x0A, 0x01, 0x14, 0x04, 0x00, 0x05, 0x1A, 0x02, 0x03, 0x0E, 0x2B, 0x05, 0x06, 0x09, 0x30, 0x21, 0x30 };
		response = PCSC_Sign(KID, hash, 35);
		PCSC_EXIT_ON_RESPONSE_ERROR(response);

		// Print signed data
		printf("Print signed value\n");
		for (int i = 0; i < PRIVATE_KEY_LEGNTH; i++)
		{
			printf("0x%02X, ", response.data[i]);
		}
	}
	else
	{
		printf("Key is empty, please import the key\n");
	}
	return 1;
}